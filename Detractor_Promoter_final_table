
--CREATE THE BASE NPS TABLE 
 CREATE MULTISET TABLE
	NDW_EBI_WORK.DETRACTOR_PROMOTER_NPS_JZ AS (
	SELECT
		NPS.*,
		DD.FISCAL_MONTH_END_DATE
	FROM
		NDW_EBI_WORK.CB_NPS_SURVEYS NPS
	LEFT JOIN NDW_SHARED_VIEWS.DATE_DIM DD ON
		NPS.SURVEY_DATE = DD.CALENDAR_DATE
	WHERE
		DD.FISCAL_MONTH_END_DATE BETWEEN '2016-08-21' AND '2019-05-21'
		AND PROMOTER_DETRACTOR IS NOT NULL
		AND LENGTH(NPS.ACCOUNT_NUMBER)>= 16) WITH DATA PRIMARY INDEX(ACCOUNT_NUMBER,
	FISCAL_MONTH_END_DATE);
--CREATE PROMO 2 MONTH INDICATOR TABLE
 CREATE MULTISET TABLE
	NDW_EBI_WORK.DETRACTOR_PROMOTER_PROMO_2_MONTH AS (
	SELECT
		P_2_MONTH.*,
		CASE
			WHEN PROMO_MONTH_END_DT IS NOT NULL
			AND 1.0000 * TOTAL_ROLL_LIFT / MRC_RECURRING_TOTAL_AMT >= 0.3 THEN '1'
			ELSE '0'
		END AS PROMO_IND_2_MONTH_GREATER_30,
		CASE
			WHEN PROMO_MONTH_END_DT IS NOT NULL
			AND 1.0000 * TOTAL_ROLL_LIFT / MRC_RECURRING_TOTAL_AMT <0.3 THEN '1'
			ELSE '0'
		END AS PROMO_IND_2_MONTH_LESS_30
	FROM
		(
		SELECT
			NPS.ACCOUNT_NUMBER,
			NPS.SURVEY_DATE,
			NPS.FISCAL_MONTH_END_DATE,
			P.FISCAL_MONTH_END_DATE AS PROMO_MONTH_END_DT,
			P.TOTAL_ROLL_LIFT,
			R.MRC_RECURRING_TOTAL_AMT
		FROM
			NDW_EBI_WORK.DETRACTOR_PROMOTER_NPS_JZ NPS
		LEFT JOIN (
			SELECT
				ACCOUNT_NUMBER,
				FISCAL_MONTH_END_DATE,
				SUM(TOTAL_ROLLOFF_LIFT) AS TOTAL_ROLL_LIFT
			FROM
				NDW_EBI_CB_VIEWS.CB_PROMOTION_ROLLOFF_CSG_ACCT
			WHERE
				FISCAL_MONTH_END_DATE IS NOT NULL
			GROUP BY
				1,
				2) P ON
			NPS.ACCOUNT_NUMBER = P.ACCOUNT_NUMBER
			AND P.FISCAL_MONTH_END_DATE BETWEEN ADD_MONTHS(NPS.FISCAL_MONTH_END_DATE,
			-1) AND NPS.FISCAL_MONTH_END_DATE
		LEFT JOIN NDW_EBI_VIEWS.ADM_ALL R ON
			P.ACCOUNT_NUMBER = R.ACCOUNT_NUMBER
			AND ADD_MONTHS(P.FISCAL_MONTH_END_DATE,
			-1) = R.MONTH_END_DT
		WHERE
			R.MRC_RECURRING_TOTAL_AMT IS NOT NULL
			AND R.MRC_RECURRING_TOTAL_AMT <> 0) P_2_MONTH QUALIFY ROW_NUMBER() OVER (PARTITION BY ACCOUNT_NUMBER,
		FISCAL_MONTH_END_DATE
	ORDER BY
		FISCAL_MONTH_END_DATE DESC) = 1) WITH DATA PRIMARY INDEX(ACCOUNT_NUMBER,
	FISCAL_MONTH_END_DATE);
--CREATE PROMO 12 MONTH INDICATOR TABLE 
 CREATE MULTISET TABLE
	NDW_EBI_WORK.DETRACTOR_PROMOTER_PROMO_12_MONTH AS (
	SELECT
		P_12_MONTH.*,
		CASE
			WHEN PROMO_MONTH_END_DT IS NOT NULL
			AND 1.0000 * TOTAL_ROLL_LIFT / MRC_RECURRING_TOTAL_AMT >= 0.3 THEN '1'
			ELSE '0'
		END AS PROMO_IND_12_MONTH_GREATER_30,
		CASE
			WHEN PROMO_MONTH_END_DT IS NOT NULL
			AND 1.0000 * TOTAL_ROLL_LIFT / MRC_RECURRING_TOTAL_AMT <0.3 THEN '1'
			ELSE '0'
		END AS PROMO_IND_12_MONTH_LESS_30
	FROM
		(
		SELECT
			NPS.ACCOUNT_NUMBER,
			NPS.SURVEY_DATE,
			NPS.FISCAL_MONTH_END_DATE,
			P.FISCAL_MONTH_END_DATE AS PROMO_MONTH_END_DT,
			P.TOTAL_ROLL_LIFT,
			R.MRC_RECURRING_TOTAL_AMT
		FROM
			NDW_EBI_WORK.DETRACTOR_PROMOTER_NPS_JZ NPS
		LEFT JOIN (
			SELECT
				ACCOUNT_NUMBER,
				FISCAL_MONTH_END_DATE,
				SUM(TOTAL_ROLLOFF_LIFT) AS TOTAL_ROLL_LIFT
			FROM
				NDW_EBI_CB_VIEWS.CB_PROMOTION_ROLLOFF_CSG_ACCT
			WHERE
				FISCAL_MONTH_END_DATE IS NOT NULL
			GROUP BY
				1,
				2) P ON
			NPS.ACCOUNT_NUMBER = P.ACCOUNT_NUMBER
			AND P.FISCAL_MONTH_END_DATE BETWEEN ADD_MONTHS(NPS.FISCAL_MONTH_END_DATE,
			-11) AND ADD_MONTHS(NPS.FISCAL_MONTH_END_DATE,
			-2)
		LEFT JOIN NDW_EBI_VIEWS.ADM_ALL R ON
			P.ACCOUNT_NUMBER = R.ACCOUNT_NUMBER
			AND ADD_MONTHS(P.FISCAL_MONTH_END_DATE,
			-1) = R.MONTH_END_DT
		WHERE
			R.MRC_RECURRING_TOTAL_AMT IS NOT NULL
			AND R.MRC_RECURRING_TOTAL_AMT <> 0) P_12_MONTH QUALIFY ROW_NUMBER() OVER (PARTITION BY ACCOUNT_NUMBER,
		FISCAL_MONTH_END_DATE
	ORDER BY
		FISCAL_MONTH_END_DATE DESC) = 1) WITH DATA PRIMARY INDEX(ACCOUNT_NUMBER,
	FISCAL_MONTH_END_DATE)
	--CREATE VOICELINE TABLE
 CREATE MULTISET TABLE
		NDW_EBI_WORK.DETRACTOR_PROMOTER_VOICELINE_JZ AS (
		SELECT
			NPS.ACCOUNT_NUMBER,
			NPS.SURVEY_DATE,
			NPS.FISCAL_MONTH_END_DATE,
			SUM(VL.VOICELINE_COUNT) AS VOICELINE_CNT
		FROM
			NDW_EBI_WORK.DETRACTOR_PROMOTER_NPS_JZ NPS
		LEFT JOIN NDW_BUS_SERV_VIEWS.BC_VOICE_LINE_SMMRY_HIST VL ON
			NPS.ACCOUNT_NUMBER = VL.ACCOUNT_NUMBER
			AND NPS.SURVEY_DATE BETWEEN VL.RECORD_START_TS AND VL.RECORD_END_TS
		GROUP BY
			1,
			2,
			3) WITH DATA PRIMARY INDEX(ACCOUNT_NUMBER,
		FISCAL_MONTH_END_DATE);
--CREATE FEATURE TABLE 
 CREATE MULTISET TABLE
	NDW_EBI_WORK.DETRACTOR_PROMOTER_JZ AS (
	SELECT
		NPS.*,
		R.COURTESY_IND,
		R.BULK_IND,
		R.ACTIVE_CLV,
		R.STAR_SEGMENT,
		R.EBILL,
		R.AUTO_PAY_ENROLLMENT,
		R.PRODUCT_MIX,
		R.HSD_TIER_NAME,
		R.IVR_TOTAL_CNT_2_MNTHS,
		R.IVR_RESOLVED_TOTAL_CNT_2_MNTHS,
		R.IVR_BILLING_CNT_2_MNTHS,
		R.IVR_OTHER_CNT_2_MNTHS,
		R.IVR_RETENTION_CNT_2_MNTHS,
		R.IVR_SALES_CNT_2_MNTHS,
		R.IVR_SVC_CNT_2_MNTHS,
		R.IVR_UNRESOLVED_TOTAL_CNT_2_MNTHS,
		R.IVR_UNRESOLVED_OTHER_CNT_2_MNTHS,
		R.IVR_UNRESOLVED_RETENTION_CNT_2_MNTHS,
		R.IVR_UNRESOLVED_SALES_CNT_2_MNTHS,
		R.IVR_UNRESOLVED_SIK_CNT_2_MNTHS,
		R.IVR_UNRESOLVED_SVC_CNT_2_MNTHS,
		R.TTS_TOTAL_TICKETS_CNT_2_MNTHS,
		R.TTS_VIDEO_TICKETS_CNT_2_MNTHS,
		R.TTS_HSD_TICKETS_CNT_2_MNTHS,
		R.TTS_CDV_TICKETS_CNT_2_MNTHS,
		R.TRUCKROLL_TOTAL_CNT_2_MNTHS,
		R.TRUCKROLL_INSTALL_CNT_2_MNTHS,
		R.TRUCKROLL_SRO_CNT_2_MNTHS,
		R.HSD_TOTAL_GB_CNT_2_MNTHS,
		R.HSD_DOWNLOAD_GB_CNT_2_MNTHS,
		R.HSD_UPLOAD_GB_CNT_2_MNTHS,
		V_USAGE.INBOUND_CALLS_CNT_2_MNTHS,
		V_USAGE.INBOUND_CALLS_DURATION_SECS_2_MNTHS,
		V_USAGE.OUTBOUND_CALLS_CNT_2_MNTHS,
		V_USAGE.OUTBOUND_CALL_DURATION_SECS_2_MNTHS,
		R.TOT_ET_1_OUTAGE_CNT_2_MNTHS,
		R.TOT_ET_2_PRIORITY_PLANT_FAULT_CNT_2_MNTHS,
		R.TOT_ET_3_POWER_OUTAGE_CNT_2_MNTHS,
		R.TOT_ET_4_FIBER_CUT_CNT_2_MNTHS,
		R.TOT_ET_5_SVC_CALL_NODE_ALERT_CNT_2_MNTHS,
		R.TOT_ET_6_MODERATE_PLANT_FAULT_CNT_2_MNTHS,
		R.TOT_ET_7_US_FEC_CNT_2_MNTHS,
		R.TOT_ET_8_DS_FEC_CNT_2_MNTHS,
		R.TOT_ET_11_WIFI_OUTAGE_CM_CNT_2_MNTHS,
		R.TOT_ET_12_LPI_CNT_2_MNTHS,
		R.TOT_ET_13_FLUX_OSP_CNT_2_MNTHS,
		R.IVR_TOTAL_CNT_12_MNTHS,
		R.IVR_RESOLVED_TOTAL_CNT_12_MNTHS,
		R.IVR_BILLING_CNT_12_MNTHS,
		R.IVR_OTHER_CNT_12_MNTHS,
		R.IVR_RETENTION_CNT_12_MNTHS,
		R.IVR_SALES_CNT_12_MNTHS,
		R.IVR_SVC_CNT_12_MNTHS,
		R.IVR_UNRESOLVED_TOTAL_CNT_12_MNTHS,
		R.IVR_UNRESOLVED_OTHER_CNT_12_MNTHS,
		R.IVR_UNRESOLVED_RETENTION_CNT_12_MNTHS,
		R.IVR_UNRESOLVED_SALES_CNT_12_MNTHS,
		R.IVR_UNRESOLVED_SIK_CNT_12_MNTHS,
		R.IVR_UNRESOLVED_SVC_CNT_12_MNTHS,
		R.TTS_TOTAL_TICKETS_CNT_12_MNTHS,
		R.TTS_VIDEO_TICKETS_CNT_12_MNTHS,
		R.TTS_HSD_TICKETS_CNT_12_MNTHS,
		R.TTS_CDV_TICKETS_CNT_12_MNTHS,
		R.TRUCKROLL_TOTAL_CNT_12_MNTHS,
		R.TRUCKROLL_INSTALL_CNT_12_MNTHS,
		R.TRUCKROLL_SRO_CNT_12_MNTHS,
		R.HSD_TOTAL_GB_CNT_12_MNTHS,
		R.HSD_DOWNLOAD_GB_CNT_12_MNTHS,
		R.HSD_UPLOAD_GB_CNT_12_MNTHS,
		V_USAGE.INBOUND_CALLS_CNT_12_MNTHS,
		V_USAGE.INBOUND_CALLS_DURATION_SECS_12_MNTHS,
		V_USAGE.OUTBOUND_CALLS_CNT_12_MNTHS,
		V_USAGE.OUTBOUND_CALL_DURATION_SECS_12_MNTHS,
		R.TOT_ET_1_OUTAGE_CNT_12_MNTHS,
		R.TOT_ET_2_PRIORITY_PLANT_FAULT_CNT_12_MNTHS,
		R.TOT_ET_3_POWER_OUTAGE_CNT_12_MNTHS,
		R.TOT_ET_4_FIBER_CUT_CNT_12_MNTHS,
		R.TOT_ET_5_SVC_CALL_NODE_ALERT_CNT_12_MNTHS,
		R.TOT_ET_6_MODERATE_PLANT_FAULT_CNT_12_MNTHS,
		R.TOT_ET_7_US_FEC_CNT_12_MNTHS,
		R.TOT_ET_8_DS_FEC_CNT_12_MNTHS,
		R.TOT_ET_11_WIFI_OUTAGE_CM_CNT_12_MNTHS,
		R.TOT_ET_12_LPI_CNT_12_MNTHS,
		R.TOT_ET_13_FLUX_OSP_CNT_12_MNTHS,
		R.FIOS_INTERNET,
		R.UVERSE_INTERNET,
		R.FRONTIER_INTERNET,
		R.CENTURYLNK_INTERNET,
		BSJ.DIVISION_NAME,
		BSJ.REGION_NAME,
		BSJ.BCV_IND,
		BSJ.BCI_IND,
		BSJ.BCI_MRC_AMT,
		BSJ.BCI_STARTER_IND,
		BSJ.BCI_PREFERRED_IND,
		BSJ.BCI_PREMIUM_IND,
		BSJ.BCI_BASIC_IND,
		BSJ.D50_IND,
		BSJ.D100_IND,
		BSJ.D100_PLUS_IND,
		BSJ.DELUXE_25MB_IND,
		BSJ.DELUXE_250MB_IND,
		BSJ.VIDEO_IND,
		BSJ.TOTAL_MRC_AMT,
		BSJ.WIFIPRO_IND,
		BSJ.BUSINESS_INTERNET_75_SERVICE_FLAG,
		BSJ.BUSINESS_INTERNET_150_SERVICE_FLAG,
		BSJ.BUSINESS_INTERNET_300_SERVICE_FLAG,
		BSJ.BUSINESS_INTERNET_500_SERVICE_FLAG,
		BSJ.BUSINESS_INTERNET_1GB_SERVICE_FLAG,
		BSJ.SMARTOFFICE_IND,
		BSJ.OFFICE365_IND,
		BSJ.MOBILITY_IND ,
		BSJ.VES_IND,
		BSJ.CONNECTION_PRO_IND,
		BSJ.TENURE_MONTHS AS TENURE,
		VL.VOICELINE_CNT,
		A.*,
		PROMO_2.PROMO_IND_2_MONTH_GREATER_30,
		PROMO_2.PROMO_IND_2_MONTH_LESS_30,
		PROMO_12.PROMO_IND_12_MONTH_GREATER_30,
		PROMO_12.PROMO_IND_12_MONTH_LESS_30
	FROM
		NDW_EBI_WORK.DETRACTOR_PROMOTER_NPS_JZ NPS
		--JOIN BC_SUBS
	LEFT JOIN NDW_BUS_SERV_VIEWS.BC_SUBS_JV BSJ ON
		NPS.ACCOUNT_NUMBER = BSJ.ACCOUNT_NUMBER
		AND NPS.SURVEY_DATE BETWEEN BSJ.RECORD_START_TS AND BSJ.RECORD_END_TS
		--JOIN ROSETTA 
	LEFT JOIN (
		SELECT
			ACCOUNT_NUMBER,
			CUSTOMER_ACCOUNT_ID,
			MONTH_END_DT,
			COURTESY_IND ,
			BULK_IND,
			EBILL,
			PRODUCT_MIX,
			HSD_TIER_NAME,
			ACTIVE_CLV ,
			AUTO_PAY_ENROLLMENT,
			STAR_SEGMENT ,
			FIOS_INTERNET,
			UVERSE_INTERNET,
			FRONTIER_INTERNET,
			CENTURYLNK_INTERNET,
			SUM(ZEROIFNULL(IVR_TOTAL)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS IVR_TOTAL_CNT_2_MNTHS,
			SUM(ZEROIFNULL(IVR_RESOLVED_TOTAL)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS IVR_RESOLVED_TOTAL_CNT_2_MNTHS,
			SUM(ZEROIFNULL(IVR_BILLING)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS IVR_BILLING_CNT_2_MNTHS,
			SUM(ZEROIFNULL(IVR_OTHER)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS IVR_OTHER_CNT_2_MNTHS,
			SUM(ZEROIFNULL(IVR_RETENTION)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS IVR_RETENTION_CNT_2_MNTHS,
			SUM(ZEROIFNULL(IVR_SALES)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS IVR_SALES_CNT_2_MNTHS,
			SUM(ZEROIFNULL(IVR_SVC)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS IVR_SVC_CNT_2_MNTHS,
			SUM(ZEROIFNULL(IVR_UNRESOLVED_TOTAL)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS IVR_UNRESOLVED_TOTAL_CNT_2_MNTHS,
			SUM(ZEROIFNULL(IVR_UNRESOLVED_OTHER)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS IVR_UNRESOLVED_OTHER_CNT_2_MNTHS,
			SUM(ZEROIFNULL(IVR_UNRESOLVED_RETENTION)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS IVR_UNRESOLVED_RETENTION_CNT_2_MNTHS,
			SUM(ZEROIFNULL(IVR_UNRESOLVED_SALES)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS IVR_UNRESOLVED_SALES_CNT_2_MNTHS,
			SUM(ZEROIFNULL(IVR_UNRESOLVED_SIK)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS IVR_UNRESOLVED_SIK_CNT_2_MNTHS,
			SUM(ZEROIFNULL(IVR_UNRESOLVED_SVC)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS IVR_UNRESOLVED_SVC_CNT_2_MNTHS,
			SUM(ZEROIFNULL(TTS_TOTAL_TICKETS)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS TTS_TOTAL_TICKETS_CNT_2_MNTHS,
			SUM(ZEROIFNULL(TTS_VIDEO_TICKETS)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS TTS_VIDEO_TICKETS_CNT_2_MNTHS,
			SUM(ZEROIFNULL(TTS_HSD_TICKETS)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS TTS_HSD_TICKETS_CNT_2_MNTHS,
			SUM(ZEROIFNULL(TTS_CDV_TICKETS)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS TTS_CDV_TICKETS_CNT_2_MNTHS,
			SUM(ZEROIFNULL(TRUCKROLL_TOTAL_CNT)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS TRUCKROLL_TOTAL_CNT_2_MNTHS,
			SUM(ZEROIFNULL(TRUCKROLL_INSTALL_CNT)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS TRUCKROLL_INSTALL_CNT_2_MNTHS,
			SUM(ZEROIFNULL(TRUCKROLL_SRO_CNT)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS TRUCKROLL_SRO_CNT_2_MNTHS,
			SUM(ZEROIFNULL(HSD_TOTAL_GB)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS HSD_TOTAL_GB_CNT_2_MNTHS,
			SUM(ZEROIFNULL(HSD_DOWNLOAD_GB)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS HSD_DOWNLOAD_GB_CNT_2_MNTHS,
			SUM(ZEROIFNULL(HSD_UPLOAD_GB)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS HSD_UPLOAD_GB_CNT_2_MNTHS,
			SUM(ZEROIFNULL(TOT_ET_1_OUTAGE)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS TOT_ET_1_OUTAGE_CNT_2_MNTHS,
			SUM(ZEROIFNULL(TOT_ET_2_PRIORITY_PLANT_FAULT)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS TOT_ET_2_PRIORITY_PLANT_FAULT_CNT_2_MNTHS,
			SUM(ZEROIFNULL(TOT_ET_3_POWER_OUTAGE)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS TOT_ET_3_POWER_OUTAGE_CNT_2_MNTHS,
			SUM(ZEROIFNULL(TOT_ET_4_FIBER_CUT)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS TOT_ET_4_FIBER_CUT_CNT_2_MNTHS,
			SUM(ZEROIFNULL(TOT_ET_5_SVC_CALL_NODE_ALERT)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS TOT_ET_5_SVC_CALL_NODE_ALERT_CNT_2_MNTHS,
			SUM(ZEROIFNULL(TOT_ET_6_MODERATE_PLANT_FAULT)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS TOT_ET_6_MODERATE_PLANT_FAULT_CNT_2_MNTHS,
			SUM(ZEROIFNULL(TOT_ET_7_US_FEC)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS TOT_ET_7_US_FEC_CNT_2_MNTHS,
			SUM(ZEROIFNULL(TOT_ET_8_DS_FEC)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS TOT_ET_8_DS_FEC_CNT_2_MNTHS,
			SUM(ZEROIFNULL(TOT_ET_11_WIFI_OUTAGE_CM)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS TOT_ET_11_WIFI_OUTAGE_CM_CNT_2_MNTHS,
			SUM(ZEROIFNULL(TOT_ET_12_LPI)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS TOT_ET_12_LPI_CNT_2_MNTHS,
			SUM(ZEROIFNULL(TOT_ET_13_FLUX_OSP)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS TOT_ET_13_FLUX_OSP_CNT_2_MNTHS,
			SUM(ZEROIFNULL(IVR_TOTAL)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS IVR_TOTAL_CNT_12_MNTHS,
			SUM(ZEROIFNULL(IVR_RESOLVED_TOTAL)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS IVR_RESOLVED_TOTAL_CNT_12_MNTHS,
			SUM(ZEROIFNULL(IVR_BILLING)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS IVR_BILLING_CNT_12_MNTHS,
			SUM(ZEROIFNULL(IVR_OTHER)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS IVR_OTHER_CNT_12_MNTHS,
			SUM(ZEROIFNULL(IVR_RETENTION)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS IVR_RETENTION_CNT_12_MNTHS,
			SUM(ZEROIFNULL(IVR_SALES)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS IVR_SALES_CNT_12_MNTHS,
			SUM(ZEROIFNULL(IVR_SVC)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS IVR_SVC_CNT_12_MNTHS,
			SUM(ZEROIFNULL(IVR_UNRESOLVED_TOTAL)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS IVR_UNRESOLVED_TOTAL_CNT_12_MNTHS,
			SUM(ZEROIFNULL(IVR_UNRESOLVED_OTHER)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS IVR_UNRESOLVED_OTHER_CNT_12_MNTHS,
			SUM(ZEROIFNULL(IVR_UNRESOLVED_RETENTION)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS IVR_UNRESOLVED_RETENTION_CNT_12_MNTHS,
			SUM(ZEROIFNULL(IVR_UNRESOLVED_SALES)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS IVR_UNRESOLVED_SALES_CNT_12_MNTHS,
			SUM(ZEROIFNULL(IVR_UNRESOLVED_SIK)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS IVR_UNRESOLVED_SIK_CNT_12_MNTHS,
			SUM(ZEROIFNULL(IVR_UNRESOLVED_SVC)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS IVR_UNRESOLVED_SVC_CNT_12_MNTHS,
			SUM(ZEROIFNULL(TTS_TOTAL_TICKETS)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS TTS_TOTAL_TICKETS_CNT_12_MNTHS,
			SUM(ZEROIFNULL(TTS_VIDEO_TICKETS)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS TTS_VIDEO_TICKETS_CNT_12_MNTHS,
			SUM(ZEROIFNULL(TTS_HSD_TICKETS)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS TTS_HSD_TICKETS_CNT_12_MNTHS,
			SUM(ZEROIFNULL(TTS_CDV_TICKETS)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS TTS_CDV_TICKETS_CNT_12_MNTHS,
			SUM(ZEROIFNULL(TRUCKROLL_TOTAL_CNT)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS TRUCKROLL_TOTAL_CNT_12_MNTHS,
			SUM(ZEROIFNULL(TRUCKROLL_INSTALL_CNT)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS TRUCKROLL_INSTALL_CNT_12_MNTHS,
			SUM(ZEROIFNULL(TRUCKROLL_SRO_CNT)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS TRUCKROLL_SRO_CNT_12_MNTHS,
			SUM(ZEROIFNULL(HSD_TOTAL_GB)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS HSD_TOTAL_GB_CNT_12_MNTHS,
			SUM(ZEROIFNULL(HSD_DOWNLOAD_GB)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS HSD_DOWNLOAD_GB_CNT_12_MNTHS,
			SUM(ZEROIFNULL(HSD_UPLOAD_GB)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS HSD_UPLOAD_GB_CNT_12_MNTHS,
			SUM(ZEROIFNULL(TOT_ET_1_OUTAGE)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS TOT_ET_1_OUTAGE_CNT_12_MNTHS,
			SUM(ZEROIFNULL(TOT_ET_2_PRIORITY_PLANT_FAULT)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS TOT_ET_2_PRIORITY_PLANT_FAULT_CNT_12_MNTHS,
			SUM(ZEROIFNULL(TOT_ET_3_POWER_OUTAGE)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS TOT_ET_3_POWER_OUTAGE_CNT_12_MNTHS,
			SUM(ZEROIFNULL(TOT_ET_4_FIBER_CUT)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS TOT_ET_4_FIBER_CUT_CNT_12_MNTHS,
			SUM(ZEROIFNULL(TOT_ET_5_SVC_CALL_NODE_ALERT)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS TOT_ET_5_SVC_CALL_NODE_ALERT_CNT_12_MNTHS,
			SUM(ZEROIFNULL(TOT_ET_6_MODERATE_PLANT_FAULT)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS TOT_ET_6_MODERATE_PLANT_FAULT_CNT_12_MNTHS,
			SUM(ZEROIFNULL(TOT_ET_7_US_FEC)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS TOT_ET_7_US_FEC_CNT_12_MNTHS,
			SUM(ZEROIFNULL(TOT_ET_8_DS_FEC)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS TOT_ET_8_DS_FEC_CNT_12_MNTHS,
			SUM(ZEROIFNULL(TOT_ET_11_WIFI_OUTAGE_CM)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS TOT_ET_11_WIFI_OUTAGE_CM_CNT_12_MNTHS,
			SUM(ZEROIFNULL(TOT_ET_12_LPI)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS TOT_ET_12_LPI_CNT_12_MNTHS,
			SUM(ZEROIFNULL(TOT_ET_13_FLUX_OSP)) OVER ( PARTITION BY ACCOUNT_NUMBER
		ORDER BY
			ACCOUNT_NUMBER,
			MONTH_END_DT ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS TOT_ET_13_FLUX_OSP_CNT_12_MNTHS
		FROM
			NDW_EBI_VIEWS.ADM_ALL) R ON
		NPS.ACCOUNT_NUMBER = R.ACCOUNT_NUMBER
		AND NPS.FISCAL_MONTH_END_DATE = R.MONTH_END_DT
		--JOIN ATHENA TABLE
	LEFT JOIN NDW_EBI_WORK.ATHENA_UPDATED A ON
		NPS.ACCOUNT_NUMBER = A.CMCST_ACCOUNT_NUMBER
		--JOIN PROMO TABLES 
	LEFT JOIN NDW_EBI_WORK.DETRACTOR_PROMOTER_PROMO_2_MONTH PROMO_2 ON
		NPS.ACCOUNT_NUMBER = PROMO_2.ACCOUNT_NUMBER
		AND NPS.SURVEY_DATE = PROMO_2.SURVEY_DATE
	LEFT JOIN NDW_EBI_WORK.DETRACTOR_PROMOTER_PROMO_12_MONTH PROMO_12 ON
		NPS.ACCOUNT_NUMBER = PROMO_12.ACCOUNT_NUMBER
		AND NPS.SURVEY_DATE = PROMO_12.SURVEY_DATE
		--JOIN VOICELINE TABLE
	LEFT JOIN NDW_EBI_WORK.DETRACTOR_PROMOTER_VOICELINE_JZ VL ON
		NPS.ACCOUNT_NUMBER = VL.ACCOUNT_NUMBER
		AND NPS.SURVEY_DATE = VL.SURVEY_DATE
		--JOIN VOICE USAGE TABLE 
	LEFT JOIN (
		SELECT
			CUSTOMER_ACCOUNT_ID,
			FISCAL_MONTH_END_DATE,
			SUM(ZEROIFNULL(OUTBOUND_CALLS_DURATION_SECS)) OVER ( PARTITION BY CUSTOMER_ACCOUNT_ID
		ORDER BY
			CUSTOMER_ACCOUNT_ID,
			FISCAL_MONTH_END_DATE ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS INBOUND_CALLS_CNT_2_MNTHS,
			SUM(ZEROIFNULL(INBOUND_CALLS_DURATION_SECS)) OVER ( PARTITION BY CUSTOMER_ACCOUNT_ID
		ORDER BY
			CUSTOMER_ACCOUNT_ID,
			FISCAL_MONTH_END_DATE ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS INBOUND_CALLS_DURATION_SECS_2_MNTHS,
			SUM(ZEROIFNULL(OUTBOUND_CALLS_CNT)) OVER ( PARTITION BY CUSTOMER_ACCOUNT_ID
		ORDER BY
			CUSTOMER_ACCOUNT_ID,
			FISCAL_MONTH_END_DATE ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS OUTBOUND_CALLS_CNT_2_MNTHS,
			SUM(ZEROIFNULL(INBOUND_CALLS_CNT)) OVER ( PARTITION BY CUSTOMER_ACCOUNT_ID
		ORDER BY
			CUSTOMER_ACCOUNT_ID,
			FISCAL_MONTH_END_DATE ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS OUTBOUND_CALL_DURATION_SECS_2_MNTHS,
			SUM(ZEROIFNULL(OUTBOUND_CALLS_DURATION_SECS)) OVER ( PARTITION BY CUSTOMER_ACCOUNT_ID
		ORDER BY
			CUSTOMER_ACCOUNT_ID,
			FISCAL_MONTH_END_DATE ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS INBOUND_CALLS_CNT_12_MNTHS,
			SUM(ZEROIFNULL(INBOUND_CALLS_DURATION_SECS)) OVER ( PARTITION BY CUSTOMER_ACCOUNT_ID
		ORDER BY
			CUSTOMER_ACCOUNT_ID,
			FISCAL_MONTH_END_DATE ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS INBOUND_CALLS_DURATION_SECS_12_MNTHS,
			SUM(ZEROIFNULL(OUTBOUND_CALLS_CNT)) OVER ( PARTITION BY CUSTOMER_ACCOUNT_ID
		ORDER BY
			CUSTOMER_ACCOUNT_ID,
			FISCAL_MONTH_END_DATE ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS OUTBOUND_CALLS_CNT_12_MNTHS,
			SUM(ZEROIFNULL(INBOUND_CALLS_CNT)) OVER ( PARTITION BY CUSTOMER_ACCOUNT_ID
		ORDER BY
			CUSTOMER_ACCOUNT_ID,
			FISCAL_MONTH_END_DATE ROWS BETWEEN 11 PRECEDING AND 2 PRECEDING) AS OUTBOUND_CALL_DURATION_SECS_12_MNTHS
		FROM
			NDW_USAGE_VIEWS.CDV_USAGE_FACT) V_USAGE ON
		R.CUSTOMER_ACCOUNT_ID = V_USAGE.CUSTOMER_ACCOUNT_ID
		AND R.MONTH_END_DT = V_USAGE.FISCAL_MONTH_END_DATE) WITH DATA PRIMARY INDEX(ACCOUNT_NUMBER,
	FISCAL_MONTH_END_DATE) ;
--CREATE FINAL TABLE FOR MODEL 
 CREATE MULTISET TABLE
	NDW_EBI_WORK.DETRACTOR_PROMOTER_JZ_2 AS (
	SELECT
		NPS.*,
		CASE
			WHEN HSD_TIER_NAME IN ('BS PREFERRED',
			'BS STARTER',
			'BS DELUXE 25 HSD',
			'BS ECONOMY',
			'BUSINESS SERVICES OTHER HSD',
			'BULK HSD',
			'BS PREMIUM') THEN 'INTERNET_LOW'
			WHEN HSD_TIER_NAME IN ('BS DELUXE 75 HSD',
			'BS DELUXE 150 HSD',
			'BS DELUXE 100 PLUS HSD',
			'PERFORMANCE TIER HSD',
			'BS DELUXE',
			'BS DELUXE 100 HSD' ) THEN 'INTERNET_MID'
			WHEN HSD_TIER_NAME IN ('BS DELUXE 300 HSD',
			'BS DELUXE 250 HSD',
			'BS EXTREME 1000 HSD',
			'BS EXTREME 500 HSD',
			'EXTREME 250/505 HSD' ) THEN 'INTERNET_HIGH'
			WHEN HSD_TIER_NAME = 'NO HSD' THEN 'NO HSD'
		END AS INTERNET_BUCKETS,
		CASE
			WHEN ZEROIFNULL(WIFIPRO_IND)+ ZEROIFNULL(SMARTOFFICE_IND)+ ZEROIFNULL(OFFICE365_IND)+ ZEROIFNULL(CONNECTION_PRO_IND)>= 1 THEN '1'
			ELSE '0'
		END AS NEW_PRODUCT_IND,
		CASE
			WHEN ZEROIFNULL(FIOS_INTERNET)+ ZEROIFNULL(UVERSE_INTERNET)+ ZEROIFNULL(FRONTIER_INTERNET)+ ZEROIFNULL(CENTURYLNK_INTERNET)>= 1 THEN '1'
			ELSE '0'
		END AS COMPETITOR_IND
	FROM
		NDW_EBI_WORK.DETRACTOR_PROMOTER_JZ NPS
	WHERE
		HSD_TIER_NAME NOT IN ('PERFORMANCE PRO HSD',
		'BLAST HSD',
		'BULK HSD')
		AND HSD_TIER_NAME NOT LIKE '%TELEWORKER%'
		AND HSD_TIER_NAME IS NOT NULL ) WITH DATA PRIMARY INDEX(ACCOUNT_NUMBER,
	FISCAL_MONTH_END_DATE) ;
--ADD ECO BILL, UPGRADE/DOWNGRADE/DISCONNECT IND, AND MRC/MRM CHANGE
 CREATE MULTISET TABLE
	NDW_EBI_WORK.DETRACTOR_PROMOTER_JZ_4 AS (
	SELECT
		NPS.*,
		R.EBILL,
		R.MRC_RECURRING_TOTAL_AMT AS MRC_0_MNTHS,
		ZEROIFNULL(R2.MRC_RECURRING_TOTAL_AMT) AS MRC_2_MNTHS,
		ZEROIFNULL(R12.MRC_RECURRING_TOTAL_AMT) AS MRC_12_MNTHS,
		R.MRM_RECURRING_TOTAL_AMT AS MRM_0_MNTHS,
		ZEROIFNULL(R2.MRM_RECURRING_TOTAL_AMT) AS MRM_2_MNTHS,
		ZEROIFNULL(R12.MRM_RECURRING_TOTAL_AMT) AS MRM_12_MNTHS,
		CASE
			WHEN MRC_2_MNTHS = 0 THEN '0'
			WHEN MRC_2_MNTHS <> 0 THEN MRC_0_MNTHS-MRC_2_MNTHS
			ELSE 'OTHERS'
		END AS MRC_2_MNTHS_CHANGE,
		CASE
			WHEN MRC_2_MNTHS = 0
			OR MRC_12_MNTHS = 0 THEN '0'
			WHEN MRC_2_MNTHS <> 0
			OR MRC_12_MNTHS <> 0 THEN MRC_2_MNTHS-MRC_12_MNTHS
			ELSE 'OTHERS'
		END AS MRC_12_MNTHS_CHANGE,
		CASE
			WHEN MRM_2_MNTHS = 0 THEN '0'
			WHEN MRM_2_MNTHS <> 0 THEN MRM_0_MNTHS-MRM_2_MNTHS
			ELSE 'OTHERS'
		END AS MRM_2_MNTHS_CHANGE,
		CASE
			WHEN MRM_2_MNTHS = 0
			OR MRM_12_MNTHS = 0 THEN '0'
			WHEN MRM_2_MNTHS <> 0
			OR MRM_12_MNTHS <> 0 THEN MRM_2_MNTHS-MRM_12_MNTHS
			ELSE 'OTHERS'
		END AS MRM_12_MNTHS_CHANGE,
		CASE
			WHEN NSD.ACTIVITYDETAIL = 'FULL DISCONNECT' THEN '1'
			WHEN NSD.ACTIVITYDETAIL <> 'FULL DISCONNECT'
			OR NSD.ACTIVITYDETAIL IS NULL THEN '0'
			ELSE 'OTHERS'
		END AS CHURN_IND,
		CASE
			WHEN NSD.ACTIVITYDETAIL = 'UPGRADE' THEN '1'
			WHEN NSD.ACTIVITYDETAIL <> 'UPGRADE'
			OR NSD.ACTIVITYDETAIL IS NULL THEN '0'
			ELSE 'OTHERS'
		END AS UPGRADE_IND,
		CASE
			WHEN NSD.ACTIVITYDETAIL = 'DOWNGRADE' THEN '1'
			WHEN NSD.ACTIVITYDETAIL <> 'DOWNGRADE'
			OR NSD.ACTIVITYDETAIL IS NULL THEN '0'
			ELSE 'OTHERS'
		END AS DOWNGRADE_IND
	FROM
		NDW_EBI_WORK.DETRACTOR_PROMOTER_JZ_2 NPS
	LEFT JOIN EBI_NSD_VIEWS.NSD_MASTER_DAILY_ACTIVITY AS NSD ON
		NPS.ACCOUNT_NUMBER = NSD.ACCOUNT_NUMBER
		--ADD CHURN/DOWNGRADE/UPGRADE IND
		AND NSD.EFFECTIVE_DATE BETWEEN NPS.SURVEY_DATE AND ADD_MONTHS(NPS.SURVEY_DATE,
		3)
		AND NSD.ACTIVITYDETAIL IN ('FULL DISCONNECT',
		'DOWNGRADE',
		'UPGRADE')
		AND NSD.ORDER_STATUS = 'COMPLETED'
		--ADD ECO BILL AND MRC_CHANGE
	LEFT JOIN NDW_EBI_VIEWS.ADM_ALL R ON
		NPS.ACCOUNT_NUMBER = R.ACCOUNT_NUMBER
		AND NPS.FISCAL_MONTH_END_DATE = R.MONTH_END_DT
	LEFT JOIN NDW_EBI_VIEWS.ADM_ALL R2 ON
		NPS.ACCOUNT_NUMBER = R2.ACCOUNT_NUMBER
		AND ADD_MONTHS(NPS.FISCAL_MONTH_END_DATE,
		-2)= R2.MONTH_END_DT
	LEFT JOIN NDW_EBI_VIEWS.ADM_ALL R12 ON
		NPS.ACCOUNT_NUMBER = R12.ACCOUNT_NUMBER
		AND ADD_MONTHS(NPS.FISCAL_MONTH_END_DATE,
		-12)= R12.MONTH_END_DT QUALIFY ROW_NUMBER() OVER (PARTITION BY NPS.ACCOUNT_NUMBER,
		NPS.FISCAL_MONTH_END_DATE
	ORDER BY
		NSD.EFFECTIVE_DATE) = 1) WITH DATA PRIMARY INDEX(ACCOUNT_NUMBER,
	FISCAL_MONTH_END_DATE) ;
--BELOW IS NOT NECESSARY FOR THE REFRESH, TO ADD ECO BILL, MRC CHANGE BACK TO THE CLUSTER TABLE 
 CREATE MULTISET TABLE
	NDW_EBI_WORK.DETRACTOR_PROMOTER_JZ_5 AS (
	SELECT
		NPS.CLUSTER_NUM,
		NPS.SURVEY_DATE ,
		NPS.ACCOUNT_NUMBER,
		NPS.PROMOTER_DETRACTOR,
		NPS.FISCAL_MONTH_END_DATE,
		NPS.ACTIVE_CLV,
		NPS.AUTO_PAY_ENROLLMENT,
		NPS.PRODUCT_MIX,
		NPS.HSD_TIER_NAME,
		NPS.IVR_TOTAL_CNT_2_MNTHS,
		NPS.IVR_RESOLVED_TOTAL_CNT_2_MNTHS,
		NPS.IVR_UNRESOLVED_TOTAL_CNT_2_MNTHS,
		NPS.TTS_TOTAL_TICKETS_CNT_2_MNTHS,
		NPS.TRUCKROLL_TOTAL_CNT_CNT_2_MNTHS,
		NPS.HSD_TOTAL_GB_CNT_2_MNTHS,
		NPS.HSD_DOWNLOAD_GB_CNT_2_MNTHS,
		NPS.HSD_UPLOAD_GB_CNT_2_MNTHS,
		NPS.INBOUND_CALLS_CNT_2_MNTHS,
		NPS.OUTBOUND_CALLS_CNT_2_MNTHS,
		NPS.TOT_ET_1_OUTAGE_CNT_2_MNTHS,
		NPS.IVR_TOTAL_CNT_12_MNTHS,
		NPS.IVR_RESOLVED_TOTAL_CNT_12_MNTHS,
		NPS.IVR_UNRESOLVED_TOTAL_CNT_12_MNTHS,
		NPS.TTS_TOTAL_TICKETS_CNT_12_MNTHS,
		NPS.TRUCKROLL_TOTAL_CNT_CNT_12_MNTHS,
		NPS.HSD_TOTAL_GB_CNT_12_MNTHS,
		NPS.HSD_DOWNLOAD_GB_CNT_12_MNTHS,
		NPS.HSD_UPLOAD_GB_CNT_12_MNTHS,
		NPS.INBOUND_CALLS_CNT_12_MNTHS,
		NPS.OUTBOUND_CALLS_CNT_12_MNTHS,
		NPS.TOT_ET_1_OUTAGE_CNT_12_MNTHS,
		NPS.BCV_IND,
		NPS.BCI_IND,
		NPS.VIDEO_IND,
		NPS.TOTAL_MRC_AMT,
		NPS.TENURE,
		NPS.VOICELINE_CNT,
		NPS.ATHENA_SITE_FIRM_REVENUE,
		NPS.ATHENA_SITE_EST_HEADCOUNT,
		NPS.ATHENA_MKTG_SUBSEGMENT,
		NPS.ATHENA_MKTG_INDUSTRY,
		NPS.PROMO_IND_2_MONTH_GREATER_30,
		NPS.PROMO_IND_2_MONTH_LESS_30,
		NPS.PROMO_IND_12_MONTH_GREATER_30,
		NPS.PROMO_IND_12_MONTH_LESS_30,
		NPS.INTERNET_BUCKETS,
		NPS.NEW_PRODUCT_IND,
		NPS.COMPETITOR_IND,
		P.EBILL,
		P.MRC_2_MNTHS_CHANGE,
		P.MRC_12_MNTHS_CHANGE,
		P.MRM_2_MNTHS_CHANGE,
		P.MRM_12_MNTHS_CHANGE,
		P.CHURN_IND,
		P.UPGRADE_IND,
		P.DOWNGRADE_IND
	FROM
		NDW_EBI_APPS.EBI_LOAD_CLUSTER_JZ_2 NPS
	LEFT JOIN NDW_EBI_WORK.DETRACTOR_PROMOTER_JZ_4 P ON
		NPS.ACCOUNT_NUMBER = P.ACCOUNT_NUMBER
		AND CAST(NPS.SURVEY_DATE AS DATE) = P.SURVEY_DATE ) WITH DATA PRIMARY INDEX(ACCOUNT_NUMBER,
	FISCAL_MONTH_END_DATE);
/*
 * NOTES: 
 * 1. 7951 CUSTOMER TOOK THE SURVEY TWICE OR MORE 
 * 2. FROM 2018-02-21, NUMBER OF MONTHLY SURVEYS INCREATED TO 3400, 400 EXTRA SURVEYS ARE FROM WEST
 * 3. PROMO TABLE (ACCOUNT TABLE) HAS MULTIPLE PROMOS FOR THE SAME CUSTOMER IN THE SAME MONTH, EXAMPLE: 8155100020114710
 * 4. PROMO TABLE: NEED A ACTIVE FLAG
 * 5. PROMO TABLE MRC IS THE MRC AFTER THE PROMO
 */
